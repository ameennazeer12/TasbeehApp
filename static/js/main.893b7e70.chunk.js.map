{"version":3,"sources":["CountApp.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CountApp","props","useState","value","JSON","parse","localStorage","getItem","dua","count","setCount","style","color","id","onClick","setItem","stringify","appearhand","App","appear","setAppear","setDua","countappear","setCountappear","handleClick","e","myDua","target","innerText","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.893b7e70.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport './App.css'\r\n\r\nconst CountApp = (props) => {\r\n  const [count, setCount] = useState(() => {\r\n      const value = JSON.parse(localStorage.getItem(props.dua))\r\n      if(value){\r\n          return value\r\n      }\r\n      else{\r\n          return 0\r\n      }\r\n    })\r\n\r\n  const increament = () => {\r\n      setCount((count) => count+1)\r\n  }\r\n  const save = () => {\r\n      localStorage.setItem(props.dua,JSON.stringify(count))\r\n      \r\n  }\r\n    return (\r\n        <div>\r\n            <p>{props.dua}</p>\r\n            <p style={{color:'forestgreen'}}>Counter: {count}</p>\r\n            <button id='btn-click' onClick={increament}>Click</button>\r\n            <button id='btn-save' onClick={save}>Save</button>\r\n            <button id='btn-reset' onClick={() => {setCount(0)}}>Reset</button>\r\n            <button id='btn-home' onClick={props.appearhand}>Home</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountApp\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport CountApp from './CountApp'\r\n\r\nconst App = () => {\r\n    const [appear,setAppear] = useState(true) \r\n    const [dua,setDua] = useState('')\r\n    const [countappear,setCountappear] = useState(false)\r\n    const handleClick = (e) => {\r\n        const myDua = e.target.innerText\r\n        setAppear((appear) => !appear)\r\n        setDua(myDua)\r\n        setCountappear((countappear) => !countappear)\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Tasbeeh App</h1>\r\n            {appear?\r\n            <>\r\n            <button id='btn-1' onClick={handleClick}> سبحان الله </button>\r\n            <button id='btn-2' onClick={handleClick}> الحمد لله </button>\r\n            <button id='btn-3' onClick={handleClick}> الله أكبر </button>\r\n            <button id='btn-4' onClick={handleClick}> لا إله إلا الله </button>\r\n            <button id='btn-5' onClick={handleClick}> أَسْتَغْفِرُ اللّٰهَ‎ </button>\r\n            </>\r\n            :null}\r\n           {countappear?<CountApp appearhand={handleClick} dua={dua}/>:null} \r\n\r\n            {/* <footer>\r\n                <p style={{display:'inline'}}>Built by Ameen  </p>\r\n                <a href=\"https://www.linkedin.com/in/ameen-nazeer-42307b13a/\" rel=\"noreferrer\" target='_blank'>LinkedIn</a>\r\n            </footer> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}